name: Manual ArcBox Execution with parameters
on:
  workflow_dispatch:
    inputs:
      flavor:
        type: choice
        description: "ArcBox flavor to deploy"
        required: true
        options:
          - Full
          - ITPro
          - DevOps
      mechanism:
        type: choice
        description: "Deployment option"
        required: true
        options:
          - ARM
          - Bicep
          - Terraform
      githubBranch:
        description: "Repo branch where the scripts are located"
        required: true
        default: "main"
      resourceGroupName:
        description: "Resource group name"
        required: true
        default: "arcbox-test-rg"
      location:
        description: "Resource group location"
        required: true
        default: "westus2"
      logAnalyticsWorkspaceName:
        description: "Analytics Workspace name"
        required: true
        default: "MyAnalyticsWorkspace123"
      windowsAdminUsername:
        description: "Windows admin username"
        required: true
        default: "arcdemo"
      deployBastion:
        type: boolean
        description: "Deploy Bastion?"
        required: true
        default: false
jobs:
  deployValidateAndClean:
    runs-on: ubuntu-latest
    steps:
      - name: Check inputs values
        run: |
          echo "Flavor: ${{ github.event.inputs.flavor }}"
          echo "Deployment option: ${{ github.event.inputs.mechanism }}" 
          echo "GitHub account: ${GITHUB_REPOSITORY_OWNER}"
          echo "Scripts branch: ${{ github.event.inputs.githubBranch }}"
          echo "Resource group: ${{ github.event.inputs.resourceGroupName }}"
          echo "Location: ${{ github.event.inputs.location }}"
          echo "Log Analytics Workspace: ${{ github.event.inputs.logAnalyticsWorkspaceName }}"
          echo "Windows admin user name: ${{ github.event.inputs.windowsAdminUsername }}"
          echo "Bastion deployment: ${{ github.event.inputs.deployBastion }}"
      - name: Expected Time Execution
        run: |
          if [ '${{ github.event.inputs.flavor }}' == 'DevOps' ]; then
           if [ '${{ github.event.inputs.deployBastion }}' == 'true' ]; then
              echo "Expected Time Execution 60 min"
           else
              echo "Expected Time Execution 50 min"
           fi
          fi
          if [ '${{ github.event.inputs.flavor }}' == 'ITPro' ]; then
           if [ '${{ github.event.inputs.deployBastion }}' == 'true' ]; then
              echo "Expected Time Execution 70 min"
           else
              echo "Expected Time Execution 60 min"
           fi
          fi
          if [ '${{ github.event.inputs.flavor }}' == 'Full' ]; then
           if [ '${{ github.event.inputs.deployBastion }}' == 'true' ]; then
              echo "Expected Time Execution 120 min"
           else
              echo "Expected Time Execution 110 min"
           fi
          fi          
          echo "if Windows Run Command not detect the end, it will finish by time out on 90 min. The scripts might run successfully but not return the results. In this cases the workflow execution time increase in about 1hs. "
      - name: Install package for ssh with password inline
        run: |
          sudo apt-get -y install putty-tools
          sudo apt-get -y install sshpass
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        if: github.event.inputs.mechanism == 'Terraform'
        with:
          terraform_version: 1.0.11
      - name: Check out repo
        uses: actions/checkout@v2
        with:
          ref: ${{ github.event.inputs.githubBranch }}
      - name: Azure Login
        uses: Azure/login@v1.4.3
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
      - name: Deploy ArcBox - Arm
        uses: Azure/cli@v1.0.6
        if: github.event.inputs.mechanism == 'ARM'
        with:
          inlineScript: |
            az group create --name ${{ github.event.inputs.resourceGroupName }} --location ${{ github.event.inputs.location }}
            az deployment group create -g  ${{ github.event.inputs.resourceGroupName }} -f "azure_jumpstart_arcbox/ARM/azuredeploy.json" -p sshRSAPublicKey='${{secrets.SSH_RSA_PUBLIC_KEY}}' spnClientId=${{secrets.SPN_CLIENT_ID}} spnClientSecret=${{secrets.SPN_CLIENT_SECRET}} spnTenantId=${{secrets.SPN_TENANT_ID}} windowsAdminUsername=${{ github.event.inputs.windowsAdminUsername }} windowsAdminPassword=${{secrets.WINDOWS_ADMIN_PASSWORD}} logAnalyticsWorkspaceName=${{ github.event.inputs.logAnalyticsWorkspaceName }} flavor=${{ github.event.inputs.flavor }} githubAccount="${GITHUB_REPOSITORY_OWNER}" githubBranch=${{github.event.inputs.githubBranch}} deployBastion=${{github.event.inputs.deployBastion}}
      - name: Deploy ArcBox - Bicep
        uses: Azure/cli@v1.0.6
        if: github.event.inputs.mechanism == 'Bicep'
        with:
          inlineScript: |
            az group create --name ${{ github.event.inputs.resourceGroupName }} --location ${{ github.event.inputs.location }}
            az deployment group create -g  ${{ github.event.inputs.resourceGroupName }} -f "azure_jumpstart_arcbox/bicep/main.bicep" -p sshRSAPublicKey='${{secrets.SSH_RSA_PUBLIC_KEY}}' spnClientId=${{secrets.SPN_CLIENT_ID}} spnClientSecret=${{secrets.SPN_CLIENT_SECRET}} spnTenantId=${{secrets.SPN_TENANT_ID}} windowsAdminUsername=${{ github.event.inputs.windowsAdminUsername }} windowsAdminPassword=${{secrets.WINDOWS_ADMIN_PASSWORD}} logAnalyticsWorkspaceName=${{ github.event.inputs.logAnalyticsWorkspaceName }} flavor=${{ github.event.inputs.flavor }} githubAccount="${GITHUB_REPOSITORY_OWNER}" githubBranch=${{github.event.inputs.githubBranch}} deployBastion=${{github.event.inputs.deployBastion}}
      - name: Deploy ArcBox - Terraform
        if: github.event.inputs.mechanism == 'Terraform'
        run: |
          chmod +x ./tests/TerraformDeploy.sh
          ./tests/TerraformDeploy.sh ./azure_jumpstart_arcbox/terraform \
                 "${{ github.event.inputs.resourceGroupName }}"  "${{ github.event.inputs.location }}" \
                 "${{secrets.SPN_CLIENT_ID}}" "${{secrets.SPN_CLIENT_SECRET}}" "${{secrets.SPN_TENANT_ID}}" \
                 "${{secrets.SSH_RSA_PUBLIC_KEY}}" "${{ github.event.inputs.windowsAdminUsername }}" \
                 "${{secrets.WINDOWS_ADMIN_PASSWORD}}" "${{ github.event.inputs.flavor }}" \
                 "${{ github.event.inputs.logAnalyticsWorkspaceName }}" "${GITHUB_REPOSITORY_OWNER}" \
                 "${{ github.event.inputs.githubBranch }}" "${{ github.event.inputs.deployBastion }}" \
                 "${{secrets.SPN_SUBSCRIPTION_ID}}"
      - name: Add NSG Rule to open our SSH Port (2204) and Run Command requires connectivity to Azure public IP addresses
        uses: Azure/cli@v1.0.6
        with:
          inlineScript: |
            az network nsg rule create -g  ${{ github.event.inputs.resourceGroupName }} --nsg-name 'ArcBox-NSG' -n 'AllowOpenSsh' --source-port-ranges  '*' --source-address-prefixes '*' --priority 1100 --destination-address-prefixes  '*' --destination-port-ranges '2204' --direction Inbound --access Allow --protocol Tcp --description "Allow Open SSH"
            az network nsg rule create -g  ${{ github.event.inputs.resourceGroupName }} --nsg-name 'ArcBox-NSG' -n 'AllowAzureCloud' --source-port-ranges  '*' --source-address-prefixes 'AzureCloud' --priority 1200 --destination-address-prefixes  '*' --destination-port-ranges '*' --direction Inbound --access Allow --protocol '*' --description "Allow allow azure ips"
            az network nsg rule create -g  ${{ github.event.inputs.resourceGroupName }} --nsg-name 'ArcBox-NSG' -n 'AllowAzureCloudOutBound' --source-port-ranges  '*' --source-address-prefixes '*' --priority 1300 --destination-address-prefixes  'AzureCloud' --destination-port-ranges '*' --direction Outbound --access Allow --protocol '*' --description "Allow allow azure ips outbound"
      - name: Adding Public Ip to Connect Open SSH when Azure Bastion is selected
        uses: Azure/cli@v1.0.6
        if: ${{ github.event.inputs.deployBastion == 'true' }}
        with:
          inlineScript: |
            az network public-ip create -g ${{ github.event.inputs.resourceGroupName }} -n 'ArcBox-Client-PIP'
            az network nic ip-config update --name 'ipconfig1' --nic-name 'ArcBox-Client-NIC' --resource-group ${{ github.event.inputs.resourceGroupName }} --public-ip-address 'ArcBox-Client-PIP'
      - name: Install Open SSH
        run: |
          az vm run-command invoke -g  ${{ github.event.inputs.resourceGroupName }}  -n ArcBox-Client --command-id RunPowerShellScript --scripts "C:\ArcBox\GHActionDeploy.ps1"
        continue-on-error: true
